/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JiaMi.java
 *
 * Created on 2012-8-14, 15:32:27
 */
package GUI;

import java.awt.FileDialog;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JProgressBar;

/**
 *
 * @author 陈立
 */
public class JiaMi extends javax.swing.JFrame {

    private File jiaMiFile;
    private File jieMiFile;
    byte[] code = "#$%^&^%$#%$%$#&%$%#^%#".getBytes();//密文
    byte[] top = "&*&^^%$%$##$$%%^%^^&^!@!#".getBytes();//加密头（标识）  
    byte[] miwen = (new String(top) + new String(code)).getBytes();
    String choosePath = null;//当前文件选择器路径
    int size = 1024;//每次byte大小 初始加密细致度 (只是被动的被改变初始值基本不用)
    int putong = 1024 * 5;//普通文件细致度
    int wenben = 1;//文本文件 高细致加密
    String[] sorry = new String[]{".没有"};//无法加密后缀名数组
    String[] xiZhi = new String[]{".txt", ".TXT", ".xml", ".jsp"};//细致加密
    String ss = "";//缓存txt 还原功能
    List<String> list = new ArrayList<String>();//存放日志记录
    int i = 0;//操作list的下标
    JProgressBar progressBar;//进度条
    long nowFileSize;//当前文件大小
    jinDu jinduT;
    int jiajie = 0;//加解开关 可判断当前状态
    boolean jianting;//对应×功能
    boolean jtAll;//对应■功能
    int okCount;    //加密解密成功的次数
    List<File> fileList = null; //文件多选
    boolean beiFenJia;//备份文件
    File beifen;//备份目录
    int dirCount = 0;//遍历是记录目录数量

    public JiaMi() {
        initComponents();
        setResizable(false);
        this.setTitle("加密器-[作者：陈立]<QQ:185817196>");
        tishi.setText("当前口令为默认");
        setLocationRelativeTo(null);
        progressBar = new JProgressBar();
        jindu.setLayout(new java.awt.BorderLayout());
        jindu.add(progressBar);//面板jindu 添加进度条progressBa        
        jindu.setVisible(false);//初始化进度条不可见
        quxiao.setVisible(false);//隐藏×
        endAll.setVisible(false);//隐藏■
        fileCount.setVisible(false);//隐藏剩余文件数

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    //文件选择器
    private List<File> filechoes() {
        JFileChooser chooser = new JFileChooser(choosePath);
        chooser.setMultiSelectionEnabled(true);//设置可以多选
        chooser.setDialogTitle("文件选择器");
        chooser.showOpenDialog(this);
        File[] files = chooser.getSelectedFiles();
        if (files.length == 0) {
            return null;
        }
        List<File> fileList = new ArrayList<File>();
        if (files.length == 0) {//如果只选中一个文件
            fileList.add(chooser.getSelectedFile());
        } else {//如果选择了多个文件
            for (int i = 0; i < files.length; i++) {
                fileList.add(files[i]);
            }
        }

        return fileList;

    }
    //目录选择器

    public File dirFileChoes() {
        JFileChooser fc = new JFileChooser(choosePath);
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fc.setDialogTitle("目录选择器");
        File f = null;
        int flag = 0;
        try {

            flag = fc.showOpenDialog(null);
        } catch (Exception head) {
            //  System.out.println("Open File Dialog ERROR!");
        }

        if (flag == JFileChooser.APPROVE_OPTION) {
            //获得该文件    
            f = fc.getSelectedFile();
        }
        if (f == null) {
            return null;
        }
        if (f.isFile()) {
            return f.getParentFile();
        }
        return f;
    }

    //多文件文件选择器
    private File somefilechoes() {
        JFileChooser chooser = new JFileChooser(choosePath);
        chooser.setMultiSelectionEnabled(true);//设置可以多选
        chooser.showOpenDialog(this);
        File file = null;
        File[] fff = chooser.getSelectedFiles();
        if (fff.length == 0) {
            file = chooser.getSelectedFile();
        }
        // File file = chooser.getSelectedFile();
//        if (file != null) {
//            for (int i = 0; i < sorry.length; i++) {
//                if (file.getName().endsWith(sorry[i])) {
//                    JOptionPane.showMessageDialog(this, "sorry【" + this.sorry[i] + "】文件无法加密！", "操作", JOptionPane.INFORMATION_MESSAGE);
//                    return null;
//                }
//            }
//        }
        return chooser.getSelectedFile();

    }

    //封装文件大小
    public String getFileSize(File f) {
        String size = null;
        if (f.length() == 0) {
            size = "0 kb";
        } else {
            if (f.length() / 1024 / 1024 >= 1024) {
                if (((f.length() / 1024 / 1024 / 1024.0) + "").length() < 5) {
                    size = ((f.length() / 1024 / 1024 / 1024.0) + "") + "G";
                } else {
                    size = ((f.length() / 1024 / 1024 / 1024.0) + "").substring(0, 5) + "G";
                }
            } else if (f.length() / 1024 >= 1024) {
                if (((f.length() / 1024 / 1024.0) + "").toString().length() < 5) {
                    size = ((f.length() / 1024 / 1024.0) + "") + "M";
                } else {
                    size = ((f.length() / 1024 / 1024.0) + "").substring(0, 5) + "M";
                }
            } else {
                if (((f.length() / 1024.0) + "").toString().length() < 5) {
                    size = ((f.length() / 1024.0) + "") + "k";
                } else {
                    size = ((f.length() / 1024.0) + "").substring(0, 5) + "k";
                }
            }
        }
        return size;
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        j2Size1 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        j2Name1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        j2Url1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        pwd = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        tishi = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        j1Name = new javax.swing.JTextField();
        j1Url = new javax.swing.JTextField();
        j1Size = new javax.swing.JTextField();
        j2Name = new javax.swing.JTextField();
        j2Url = new javax.swing.JTextField();
        j2Size = new javax.swing.JTextField();
        jindu = new javax.swing.JPanel();
        load = new javax.swing.JLabel();
        fileUrl = new javax.swing.JLabel();
        quxiao = new javax.swing.JLabel();
        endAll = new javax.swing.JLabel();
        fileCount = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton2.setText("选择解密文件");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        j2Size1.setText("文件大小：");

        jButton7.setText("选择解密目录");
        jButton7.setToolTipText("选择目录");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel6.setText("目录级加密");
        jLabel6.setToolTipText("加密当前文件夹下所有文件···");

        jButton8.setText("目录级解密");
        jButton8.setToolTipText("解密当前文件夹（包括子目录）下所有文件···");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel7.setText("目录级解密");

        jButton5.setText("选择加密目录");
        jButton5.setToolTipText("选择目录");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton3.setText("文件加密");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("加密文件名：");

        jLabel3.setText("文件大小：");

        jLabel5.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel5.setText("文件解密");

        jButton6.setText("目录级加密");
        jButton6.setToolTipText("加密当前文件夹（包括子目录）下所有文件···");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton4.setText("文件解密");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        j2Name1.setText("加密文件名：");

        jLabel2.setText("文件路径：");

        j2Url1.setText("文件路径：");

        jButton1.setText("选择加密文件");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel4.setText("文件加密");

        jLabel8.setFont(new java.awt.Font("宋体", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(204, 0, 0));
        jLabel8.setText("自定义加密解密口令：");
        jLabel8.setToolTipText("请牢记密钥···");

        pwd.setBackground(new java.awt.Color(204, 204, 204));
        pwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("宋体", 1, 12)); // NOI18N
        jButton9.setText("设置密钥");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("宋体", 0, 10)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 51, 255));
        jLabel9.setText("不添加则使用默认方式");

        tishi.setFont(new java.awt.Font("华文细黑", 0, 12)); // NOI18N
        tishi.setText("未添加");
        tishi.setToolTipText("当前密钥");

        jLabel10.setFont(new java.awt.Font("宋体", 2, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 153, 153));
        jLabel10.setText("点击恢复默认");
        jLabel10.setToolTipText("软件默认密钥，点击即用···");
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(pwd, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10))
                    .addComponent(tishi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(77, 77, 77))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(jLabel8)
                    .addComponent(pwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(tishi)))
        );

        j1Name.setEditable(false);

        j1Url.setEditable(false);

        j1Size.setEditable(false);

        j2Name.setEditable(false);

        j2Url.setEditable(false);

        j2Size.setEditable(false);

        jindu.setLayout(new java.awt.CardLayout());

        load.setFont(new java.awt.Font("宋体", 1, 13)); // NOI18N
        load.setText("       ");

        fileUrl.setFont(new java.awt.Font("宋体", 2, 12)); // NOI18N
        fileUrl.setText("------------------------------------");

        quxiao.setBackground(new java.awt.Color(204, 0, 0));
        quxiao.setFont(new java.awt.Font("宋体", 1, 12)); // NOI18N
        quxiao.setForeground(new java.awt.Color(204, 0, 0));
        quxiao.setText("×");
        quxiao.setToolTipText("终止当前");
        quxiao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quxiaoMouseClicked(evt);
            }
        });

        endAll.setBackground(new java.awt.Color(204, 0, 0));
        endAll.setFont(new java.awt.Font("宋体", 1, 12)); // NOI18N
        endAll.setForeground(new java.awt.Color(204, 0, 0));
        endAll.setText("■");
        endAll.setToolTipText("终止所有");
        endAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                endAllMouseClicked(evt);
            }
        });

        fileCount.setFont(new java.awt.Font("宋体", 1, 10)); // NOI18N
        fileCount.setText("剩余文件数：10000");

        jLabel11.setFont(new java.awt.Font("幼圆", 1, 20)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 153, 0));
        jLabel11.setText("加密器");
        jLabel11.setToolTipText("有好的意见请Q185817196");
        jLabel11.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(51, 51, 0), new java.awt.Color(102, 102, 0)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(j2Size1)
                            .addComponent(j2Url1)
                            .addComponent(j2Name1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(j2Size, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(j2Url, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(j2Name, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(j1Size, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(j1Url, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(j1Name, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton3)
                                    .addComponent(jButton1)
                                    .addComponent(jLabel4))
                                .addGap(15, 15, 15)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton6)
                                    .addComponent(jButton5)
                                    .addComponent(jLabel6)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton4)
                                    .addComponent(jButton2)
                                    .addComponent(jLabel5))
                                .addGap(15, 15, 15)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton8)
                                    .addComponent(jLabel7)
                                    .addComponent(jButton7)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(load)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(234, 234, 234)
                                .addComponent(quxiao)
                                .addGap(10, 10, 10)
                                .addComponent(endAll)
                                .addGap(18, 18, 18)
                                .addComponent(fileCount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jindu, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(fileUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel11)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {j1Name, j1Size, j1Url, j2Name, j2Size, j2Url});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel1))
                            .addComponent(j1Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(j1Url, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel3))
                            .addComponent(j1Size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4))
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton5))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addComponent(jButton6))))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(endAll)
                        .addComponent(fileCount))
                    .addComponent(quxiao)
                    .addComponent(jindu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(load))
                .addGap(3, 3, 3)
                .addComponent(fileUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(j2Name1)
                        .addGap(16, 16, 16)
                        .addComponent(j2Url1)
                        .addGap(10, 10, 10)
                        .addComponent(j2Size1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(4, 4, 4)
                                .addComponent(jButton2)
                                .addGap(7, 7, 7)
                                .addComponent(jButton4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(4, 4, 4)
                                .addComponent(jButton7)
                                .addGap(7, 7, 7)
                                .addComponent(jButton8))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(j2Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(j2Url, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(j2Size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        txt.setBackground(new java.awt.Color(204, 255, 204));
        txt.setColumns(20);
        txt.setRows(5);
        txt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                txtMouseReleased(evt);
            }
        });
        txt.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(txt);
        txt.setEditable(false);

        jMenu1.setText("工具");

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/备份.jpg"))); // NOI18N
        jMenu3.setText("备份");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/文件备份_1.jpg"))); // NOI18N
        jMenuItem1.setText("加密文件备份到指定目录");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/目录备份_2.jpg"))); // NOI18N
        jMenuItem2.setText("加密目录文件备份到指定目录");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenu1.add(jMenu3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//加密选择文件
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        List<File> fileList = filechoes();
        File file = null;
        if (fileList == null) {
            return;
        }
        if (fileList.size() == 1) {//如果只有一个文件
            file = fileList.get(0);//取第一个文件
        } else {//如果是多个文件
            //部分文件加密
            this.fileList = fileList;
            choosePath = fileList.get(0).getParent();
            //someJiaMi(fileList);
            //并显示
            j1Name.setText("<选中文件>[" + fileList.size() + "]");
            j1Url.setText("");
            j1Size.setText("");
        }
        if (file != null) {
            jiaMiFile = file;
            choosePath = jiaMiFile.getParent();
            j1Name.setText(jiaMiFile.getName());
            j1Url.setText(jiaMiFile.getPath());
            //j1Url.setText(jiaMiFile.getParent());
            j1Size.setText(getFileSize(jiaMiFile));
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    //若干文件加密
    public void someJiaMi(List<File> fileList) {
        txt.setText("");
        Date date1 = new Date();
        int n = 0;
        for (int i = 0; i < fileList.size(); i++) {

            if (fileList.get(i).isDirectory()) {  //如果是目录
                if (this.beiFenJia) {//如果是目录级备份
                    //保持目录原型 创建目录
                    String dirName = fileList.get(i).getPath().substring(fileList.get(i).getPath().lastIndexOf(choosePath) + choosePath.length());
                    File d = new File(this.beifen.getPath() + "\\" + dirName);
                    d.mkdir();
                }
                //结束本次循环
                continue;
            }
            //显示剩余文件数量
            fileCount.setVisible(true);
            fileCount.setText("剩余文件：" + (fileList.size() - n - 1 - this.dirCount));
            endAll.setVisible(true);
            jiami(fileList.get(i));
            //选择终止全部文件加密  
            if (jtAll) {//终止所有加密解密  
                //日志
                txt.append("<加密>[终止]（终止所有文件加密）[" + this.getTime() + "]<剩余文件：" + (fileList.size() - i - 1 - dirCount) + ">\r\n");
                //退出循环
                break;
            }
            n++;
        }
        jtAll = false;
        endAll.setVisible(false);
        //隐藏剩余文件数
        fileCount.setVisible(false);
        Date date2 = new Date();
        String haoshi = this.haoShi(date1, date2);
        txt.append("\t<加密>总耗时 " + haoshi + "  <完成:" + okCount + ">/ <加载:" + (fileList.size() - dirCount) + ">\r\n");
        //收尾初始
        end();
        okCount = 0;
        txtEnd();
        rzList();
        JOptionPane.showMessageDialog(this, "加密完成！", "操作", JOptionPane.INFORMATION_MESSAGE);
    }

    //点击加密
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (jiajie == 0) {//防止连击
            jiaJie jia = new jiaJie();
            jia.start();
            jiajie = 1;

        }


    }//GEN-LAST:event_jButton3ActionPerformed
    //开始加密

    public void starJia() {
        //加密方法
        if (jiaMiFile == null && fileList == null) {
            JOptionPane.showMessageDialog(this, "请先选择文件！", "操作", JOptionPane.INFORMATION_MESSAGE);
        } else {

            txt.setText("");
            fileCount.setVisible(true);
            fileCount.setText("单一文件加密");
            if (this.fileList != null) {
                this.someJiaMi(fileList);
                j1Name.setText("");
                fileList = null;
                return;
            } else if (this.jiami(jiaMiFile)) {
                rzList();
                end();
                fileCount.setVisible(false);
                this.beiFenJia = false;//备份为假
                okCount = 0;//清零成功次数
                JOptionPane.showMessageDialog(this, "加密成功！", "操作", JOptionPane.INFORMATION_MESSAGE);
            } else {
                rzList();
                JOptionPane.showMessageDialog(this, "加密失败！", "操作", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    //选择解密文件
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        List<File> fileList = filechoes();
        File file = null;
        if (fileList == null) {
            return;
        }
        if (fileList.size() == 1) {//如果只有一个文件
            file = fileList.get(0);//取第一个文件
        } else {//如果是多个文件
            //部分文件加密
            this.fileList = fileList;
            choosePath = fileList.get(0).getParent();
            //someJiaMi(fileList);
            //并显示 
            j2Name.setText("<选中文件>[" + fileList.size() + "]");
            j2Url.setText("");
            j2Size.setText("");
        }
        if (file != null) {
            jieMiFile = file;
            choosePath = jieMiFile.getParent();
            j2Name.setText(jieMiFile.getName());
            j2Url.setText(jieMiFile.getPath());
            j2Size.setText(getFileSize(jieMiFile));
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    //若干文件解密
    public void someJieMi(List<File> fileList) {
        txt.setText("");
        Date date1 = new Date();
        int n = 0;
        for (int i = 0; i < fileList.size(); i++) {

            if (fileList.get(i).isDirectory()) {  //如果是目录
                //结束本次循环
                continue;
            }
            //显示剩余文件数量
            fileCount.setVisible(true);
            fileCount.setText("剩余文件：" + (fileList.size() - n - 1 - this.dirCount));
            endAll.setVisible(true);
            jieMi(fileList.get(i));
            //选择终止全部文件解密 
            if (jtAll) {//终止所有加密解密                     
                //日志
                txt.append("<加密>[终止]（终止所有文件加密）[" + this.getTime() + "]<剩余文件：" + (fileList.size() - i - 1 - dirCount) + ">\r\n");
                //退出循环
                break;
            }
            n++;
        }
        jtAll = false;
        endAll.setVisible(false);
        //隐藏剩余文件数
        fileCount.setVisible(false);
        Date date2 = new Date();
        String haoshi = this.haoShi(date1, date2);
        txt.append("\t<解密>总耗时 " + haoshi + "  <完成:" + okCount + ">/ <加载:" + (fileList.size() - dirCount) + ">\r\n");
        //收尾初始
        end();
        okCount = 0;
        txtEnd();
        rzList();
        JOptionPane.showMessageDialog(this, "解密完成！", "操作", JOptionPane.INFORMATION_MESSAGE);

    }

    //点击解密
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if (jiajie == 0) {//防止连击
            jiaJie jia = new jiaJie();
            jia.start();
            jiajie = 2;
        }


    }//GEN-LAST:event_jButton4ActionPerformed
//开始解密

    public void starJie() {
        if (jieMiFile == null && fileList == null) {
            JOptionPane.showMessageDialog(this, "请先选择文件！", "操作", JOptionPane.INFORMATION_MESSAGE);
        } else {
            txt.setText("");
            fileCount.setVisible(true);
            fileCount.setText("单一文件解密");
            if (this.fileList != null) {
                this.someJieMi(fileList);
                fileList = null;
                j1Name.setText("");
            } else if (jieMi(jieMiFile)) {
                rzList();
                fileCount.setVisible(false);
                end();
                okCount = 0;//清零成功次数
                JOptionPane.showMessageDialog(this, "解密成功！", "操作", JOptionPane.INFORMATION_MESSAGE);
            } else {
                rzList();
                JOptionPane.showMessageDialog(this, "解密失败！", "操作", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

//得到文件所在目录
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        File file = this.dirFileChoes();
        if (file != null) {
            jiaMiFile = file;
            choosePath = jiaMiFile.getPath();
            j1Url.setText(choosePath);
            j1Name.setText("");
            j1Size.setText("");
        }

    }//GEN-LAST:event_jButton5ActionPerformed
//点击加密目录下所有文件
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        if (jiajie == 0) {//防止连击
            jiaJie jia = new jiaJie();
            jia.start();
            jiajie = 3;
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    //开始目录级加密
    public void starMuJia() {
        if (jiaMiFile == null || jiaMiFile.isFile()) {
            JOptionPane.showMessageDialog(this, "请先选择目录！", "操作", JOptionPane.INFORMATION_MESSAGE);
        } else {
            List<File> list = new ArrayList<File>();
            list = this.getFileList(jiaMiFile, list);
            this.someJiaMi(list);
            this.beiFenJia = false;
        }
    }

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:     
        File file = this.dirFileChoes();
        if (file != null) {
            jieMiFile = file;
            choosePath = jieMiFile.getPath();
            j2Url.setText(choosePath);
            j2Name.setText("");
            j2Size.setText("");
        }
    }//GEN-LAST:event_jButton7ActionPerformed
//目录级解密
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        if (jiajie == 0) {//防止连击
            jiaJie jia = new jiaJie();
            jia.start();
            jiajie = 4;
        }
    }//GEN-LAST:event_jButton8ActionPerformed
    //开始目录级解密

    public void starMuJie() {
        if (jieMiFile == null || jieMiFile.isFile()) {
            JOptionPane.showMessageDialog(this, "请先选择目录！", "操作", JOptionPane.INFORMATION_MESSAGE);
        } else {

            List<File> list = new ArrayList<File>();
            list = this.getFileList(jieMiFile, list);
            someJieMi(list);
        }
    }

    private void pwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pwdActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        String p = pwd.getText();
        if (p.equals("") || p.trim().length() == 0) {
            JOptionPane.showMessageDialog(this, "[失败]不能为空！", "操作错误", JOptionPane.INFORMATION_MESSAGE);
        } else if (p.trim().split(" ").length > 1) {
            JOptionPane.showMessageDialog(this, "[失败]请勿空格！", "操作错误", JOptionPane.INFORMATION_MESSAGE);
        } else {
            this.code = p.getBytes();
            miwen = (new String(top) + new String(code)).getBytes();
            tishi.setText("当前口令：" + p);
            JOptionPane.showMessageDialog(this, "[成功]请牢记密钥！", "操作成功", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        // TODO add your handling code here:

        this.code = "#$%^&^%$#%$%$#&%$%#^%#".getBytes();
        miwen = (new String(top) + new String(code)).getBytes();
        tishi.setText("当前口令为默认");
    }//GEN-LAST:event_jLabel10MouseClicked
//右键菜单
    private void txtMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtMouseReleased
        // TODO add your handling code here:
        //创建右键菜单
        final int cursor = txt.getText().length();
        JPopupMenu popMenu = new JPopupMenu();
        if (evt.isPopupTrigger()) { //判断是否为右键单击，以便实现右键弹出菜单         
            //声明
            JMenuItem MenuRootNode = new JMenuItem("最下端");
            JMenuItem MenuRootNode1 = new JMenuItem("复制");
            JMenuItem MenuRootNode2 = new JMenuItem("复制全文");
            JMenuItem MenuRootNode3 = new JMenuItem("日志生成");
            JMenuItem MenuRootNode4 = new JMenuItem("清空");
            JMenuItem MenuRootNode5 = new JMenuItem("上一日志");
            JMenuItem MenuRootNode6 = new JMenuItem("下一日志");
            //  添加
            popMenu.add(MenuRootNode);
            popMenu.add(MenuRootNode1);
            popMenu.add(MenuRootNode2);
            popMenu.add(MenuRootNode4);
            popMenu.add(MenuRootNode5);
            popMenu.add(MenuRootNode6);
            popMenu.add(MenuRootNode3);
            //显示右键菜单
            popMenu.show(evt.getComponent(), evt.getX(), evt.getY());

            //右键菜单事件
            //刷新
            MenuRootNode.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {

                    txt.setCaretPosition(cursor);
                }
            });
            //复制
            MenuRootNode1.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    String text = txt.getSelectedText();
                    if (text != null) {
                        xtCopy(text);
                    }
                }
            });
            //复制全文
            MenuRootNode2.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    txt.selectAll();
                    String text = txt.getSelectedText();
                    txt.setCaretPosition(cursor);
                    //操作系统剪切板  把字符转写入系统剪切板
                    if (text != null) {
                        xtCopy(text);
                    }
                }
            });
            MenuRootNode3.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    //日志输出
                    printRZ();
                }
            });
            //清空
            MenuRootNode4.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (!txt.getText().equals("") && !list.contains(txt.getText())) {
                        list.add(txt.getText());
                        i = list.size();
                    }
                    //清空
                    txt.setText("");

                }
            });
            //上一次日志
            MenuRootNode5.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (jiajie == 0) {
                        //上一个
                        if (i > list.size() - 1) {
                            i = list.size() - 1 - 1;
                        } else {
                            i -= 1;
                        }
                        if (i < 0) {
                            // txt.setText("");
                            if (!list.isEmpty()) {
                                txt.setText(list.get(0));
                            }

                        } else {
                            txt.setText(list.get(i));
                        }

                    }
                }
            });
            //下一次日志
            MenuRootNode6.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    //下一个
                    if (jiajie == 0) {


                        if (i < 0) {
                            i = 1;
                        } else {
                            i += 1;
                        }
                        if (i >= list.size()) {
                            // txt.setText("");
                            if (!list.isEmpty()) {
                                txt.setText(list.get(list.size() - 1));
                            }

                        } else {
                            txt.setText(list.get(i));
                        }

                    }
                }
            });
        }

    }//GEN-LAST:event_txtMouseReleased
    public class jiaJie extends Thread {

        public void run() {
            if (jiajie == 1) {
                starJia();
                jiajie = 0;
            }
            if (jiajie == 2) {
                starJie();
                jiajie = 0;
            }
            if (jiajie == 3) {
                starMuJia();
                jiajie = 0;
            }
            if (jiajie == 4) {
                starMuJie();
                jiajie = 0;
            }
        }
    }

    //进度条线程类
    public class jinDu extends Thread {

        File file;
        File dlefile;
        int i;
        boolean boo = true;//进度条线程

        public jinDu() {
        }

        public jinDu(File file) {
            this.file = file;
            init();
        }

        public void setFile(File file) {
            this.file = file;
            init();
        }

        public void setDleFile(File dlefile) {
            this.dlefile = dlefile;
            init();
        }

        public void init() {
            progressBar.setStringPainted(true);
            progressBar.setValue(0);
            progressBar.setBorderPainted(true);
            progressBar.setToolTipText(file.getName());
            boo = true;
        }

        public void run() {
            fileUrl.setText("[大小<" + getFileSize(file) + ">]" + file.getPath());//进度路径
            while (boo) {
                if (dlefile.length() == 0 || dlefile.length() >= file.length()) {
                    boo = false;
                }
                progressBar.setValue((int) ((((double) nowFileSize) / ((double) file.length())) * 100));
                try {
                    Thread.sleep(200);
                } catch (Exception ex) {
                    Logger.getLogger(JiaMi.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            progressBar.setValue(0);
        }
    }

    //取年月日
    public String getYMD() {
        Date d = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        return sdf.format(d);
    }
    //日志打印

    public void printRZ() {
        File file = this.dirFileChoes();
        String par = null;
        if (file.isFile()) {
            par = file.getParent();
        } else {
            par = file.getPath();
        }
        file = new File(par + "\\加密(解密)日志" + this.getYMD() + ".txt");
        String txt = "";
        for (int i = 0; i < list.size(); i++) {
            if (i == 0) {
                txt = "*************" + this.getTime() + "*************\r\n\r\n" + list.get(i);
            } else {
                txt = txt + "\r\n" + list.get(i);
            }
        }
        txt = txt + "\r\n**************************************\r\n\r\n\r\n";
        this.writeTXT(file, txt);
    }
    //日志记录

    public void rzList() {
        if (!txt.getText().equals("") || !(txt.getText().trim().length() == 0)) {
            list.add(txt.getText());
            i = list.size() - 1;
        }

    }
    //在指定文件写入指定文本

    public void writeTXT(File file, String txt) {
        BufferedWriter bfr = null;
        if (file != null && !txt.equals("")) {
            try {
                bfr = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file, true)));
                bfr.write(txt);
                bfr.flush();
                bfr.close();
                JOptionPane.showMessageDialog(this, "日志文件添加成功\r\n路径为：" + file.getPath(), "操作错误", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                Logger.getLogger(JiaMi.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //清空list 以免程序未推出 再次生成日志重复
        this.list.clear();
    }
    private void txtPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPropertyChange

    //点×取消
    private void quxiaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quxiaoMouseClicked
        // TODO add your handling code here:
        jianting = true;  //设置 “单个文件取消”监听
    }//GEN-LAST:event_quxiaoMouseClicked
//点方块 终止所有加密解密
    private void endAllMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_endAllMouseClicked
        // TODO add your handling code here:
        jianting = true;
        jtAll = true;
    }//GEN-LAST:event_endAllMouseClicked
//备份加密文件
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        //选择加密文件
        List<File> fileList = filechoes();
        if (fileList == null) {
            JOptionPane.showMessageDialog(this, "[失败]请选择需备份加密的文件！", "操作错误", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        File file = null;
        if (fileList.size() == 1) {//如果只有一个文件
            file = fileList.get(0);//取第一个文件
        } else {//如果是多个文件
            //部分文件加密
            this.fileList = fileList;
            choosePath = fileList.get(0).getParent();
            //someJiaMi(fileList);
            //并显示
            j1Name.setText("<选中文件>[" + fileList.size() + "]");
            j1Url.setText("");
            j1Size.setText("");
        }
        if (file != null) {
            jiaMiFile = file;
            choosePath = jiaMiFile.getParent();
            j1Name.setText(jiaMiFile.getName());
            j1Url.setText(jiaMiFile.getPath());
            j1Size.setText(getFileSize(jiaMiFile));
        }

        //选择保存目录
        File dir = this.dirFileChoes();
        if (dir == null) {
            JOptionPane.showMessageDialog(this, "[失败]请选择备份目录！", "操作错误", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        this.beifen = new File(dir.getPath() + "\\加密备份" + this.getYMD());
        beifen.mkdir();//创建目录
        //选好目录后 开始加密
        this.beiFenJia = true;
        if (jiajie == 0) {//防止连击 
            jiaJie jia = new jiaJie();
            jia.start();
            jiajie = 1;

        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    //备份目录级
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        //选择加密目录
        File file = this.dirFileChoes();
        if (file == null) {
            JOptionPane.showMessageDialog(this, "[失败]请选择需加密的目录！", "操作错误", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (file != null) {
            jiaMiFile = file;
            choosePath = jiaMiFile.getPath();
            j1Url.setText(choosePath);
            j1Name.setText("");
            j1Size.setText("");
        }


        //选择保存目录
        File dir = this.dirFileChoes();
        if (dir == null) {
            JOptionPane.showMessageDialog(this, "[失败]请选择备份目录！", "操作错误", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        this.beifen = new File(dir.getPath() + "\\加密备份" + this.getYMD() + "\\" + file.getName());
        this.beifen.mkdirs();//创建目录
        //选好目录后 开始加密
        this.beiFenJia = true;
        if (jiajie == 0) {//防止连击 
            jiaJie jia = new jiaJie();
            jia.start();
            jiajie = 3;

        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    public void xtCopy(String text) {
        Clipboard sysc = Toolkit.getDefaultToolkit().getSystemClipboard();
        Transferable tText = new StringSelection(text);
        sysc.setContents(tText, null);
    }

    //显示详情
    //加密显示
    public void jiarizhi(File file, String now, String haoshi) {
        String t = null;
        if (this.beiFenJia) {//如果是备份
            t = "<加密备份>[成功]-时间-[" + now + "]-大小[" + this.getFileSize(file) + "]-耗时[" + haoshi + "]\r\n  >>源文件路径:"
                    + file.getPath() + "\r\n  >>备份路径:" + this.beifen + "\\" + file.getName() + "\r\n";
        } else {
            t = "<加密>[成功]-时间-[" + now + "]-大小[" + this.getFileSize(file) + "]-耗时[" + haoshi + "]\r\n  >>文件路径:" + file.getPath() + "\r\n";
        }
        txt.append(t);
    }
    //解密显示

    public void jierizhi(File file, String now, String haoshi) {
        String t = "<解密>[成功]-时间-[" + now + "]-大小[" + this.getFileSize(file) + "]-耗时[" + haoshi + "]\r\n  >>文件路径:" + file.getPath() + "\r\n";
        txt.append(t);
    }

    //加密条件限定
    public boolean canjiami(File file, String now) {
        //如果文件为空
        if (file.length() == 0) {
            txt.append("加密[失败]（文件为空）[" + now + "]>>文件路径:" + file.getPath() + "\r\n");
            txtEnd();
            return false;
        }
        if (!file.renameTo(file)) {
            txt.append("加密[失败]（文件被其它程序打开）[" + now + "]>>文件路径:" + file.getPath() + "\r\n");
            return false;
        }
        try {
            InputStream is = new FileInputStream(file);
            byte[] data = new byte[top.length];
            is.read(data, 0, top.length);
            for (int i = 0; i < top.length; i++) {
                if (top[i] != data[i]) {
                    is.close();
                    return true;//可以加密
                }
            }
            txt.append("加密[失败]（已加密）[" + now + "]>>文件路径:" + file.getPath() + "\r\n");
            txtEnd();
            is.close();
            return false;
        } catch (Exception e) {
            e.printStackTrace();
        }


        return true;
    }

    //解密条件限定
    public boolean canjiemi(File file, String now) {
        //如果文件为空
        if (file.length() == 0) {
            txt.append("<解密>[失败]（文件为空）[" + now + "]>>文件路径:" + file.getPath() + "\r\n");
            txtEnd();
            return false;
        }
        if (!file.renameTo(file)) {
            txt.append("解密[失败]（文件被其它程序打开）[" + now + "]>>文件路径:" + file.getPath() + "\r\n");
            return false;
        }
        try {
            InputStream is = new FileInputStream(file);
            byte[] data = new byte[top.length];
            is.read(data);
            for (int i = 0; i < top.length; i++) {//验证密文头
                if (top[i] != data[i]) {
                    is.close();
                    txt.append("<解密>[失败]（未用本软件加密）[" + now + "]>>文件路径:" + file.getPath() + "\r\n");
                    txtEnd();
                    return false;//不可以解密
                }
            }
            byte[] buff = new byte[code.length];
            is.read(buff);
            for (int i = 0; i < code.length; i++) {//验证密文体
                if (code[i] != buff[i]) {
                    is.close();
                    txt.append("<解密>[失败]（密钥错误）[" + now + "]>>文件路径:" + file.getPath() + "\r\n");
                    txtEnd();
                    return false;//不可以解密
                }
            }
            is.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return true;

    }

    //取系统当前时间字符串
    public String getTime() {
        Date d = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        return sdf.format(d);
    }

    //计算耗时
    public String haoShi(Date date1, Date date2) {
        long size = date2.getTime() - date1.getTime();
        int wei = 6;//保留位数
        String rs = null;
        if (size > 1000 * 60 * 60) {
            rs = (size + 0.0) / (1000 * 60) + "分";
            if (rs.length() > wei) {
                rs = rs.substring(0, wei) + "分";
            }
        } else {
            rs = ((size + 0.0) / (1000)) + "秒";
            if (rs.length() > wei) {
                rs = rs.substring(0, wei) + "秒";
            }
        }

        return rs;
    }

    //细致加密解密智能设置
    public void XiZhi(File file) {
        for (int i = 0; i < xiZhi.length; i++) {
            if (file.getName().endsWith(xiZhi[i])) {
                this.size = this.wenben;
                return;
            }
        }
        this.size = this.putong;
        if (file.length() < this.size + miwen.length) {
            this.size = this.wenben;
        }
    }

    //文件加密
    public boolean jiami(File file) {
        String now = getTime();//得到现在时间
        //  System.out.println("能否被读"+file.canRead()+"能否被执行"+file.canExecute()+"能否被操作"+file.canWrite()+"能否改名："+file.renameTo(file));
        //判断能否加密

        if (!canjiami(file, now)) {
            return false;
        }
        //智能细致加密
        XiZhi(file);
        //初始化显示
        star();
        Date date1 = new Date();//计算消耗时间的初始值
        byte[] data = null;
        byte[] buff = null;
        InputStream is = null;
        OutputStream os = null;
        File f = null;
        long part = file.length() / this.size;
        long surplus = file.length() % this.size;
        try {
            is = new FileInputStream(file);
            if (this.beiFenJia) {
                f = new File(this.beifen + "\\" + file.getName());
                if (this.jiajie == 3) {//如果是目录级备份
                    f = new File(this.beifen + file.getPath().substring(file.getPath().lastIndexOf(choosePath) + choosePath.length()));//得到文件取掉原目录的文件地址     
                }
            } else {
                f = new File(file.getParent() + "\\加密中" + file.getName());
            }
            os = new FileOutputStream(f);
            data = new byte[this.size];
            buff = new byte[this.size];//缓存上一次读出的数据
            int n = 1;
            os.write(this.miwen);//添加整体密文
            //开始进度条线程
            jinduT = new jinDu();
            //给进度条线程初始化
            this.jinduT.setFile(file);//被加密的文件
            this.jinduT.setDleFile(f);//最后变成加密的文件
            jinduT.start();
            while (is.read(data) != -1) {

                if (n % 2 == 1) {
                    for (int i = 0; i < this.size; i++) {
                        buff[i] = data[i];
                    }
                }
                if (n % 2 == 0) {
                    if (n == part + 1) {//最后一段字节
                        os.write(data, 0, (int) surplus);
                    } else {
                        os.write(data);
                    }
                    os.write(buff);
                    nowFileSize = f.length();//获取当前进度
                }
                if (jianting) {//终止×加密解密
                    is.close();
                    os.flush();
                    os.close();
                    //删除f                  
                    f.delete();
                    end();
                    this.beiFenJia = false;
                    //打印日志********************
                    txt.append("<加密>[失败]（终止加密）[" + now + "]>>文件路径:" + file.getPath() + "\r\n");
                    return false;
                }
                n++;

            }
            if (n % 2 == 0) { //如果最后一次只读进了buff
                if (n - 1 == part + 1) {//最后一断字节                                             
                    os.write(buff, 0, (int) surplus);
                } else {
                    os.write(buff);
                }
            }
            is.close();
            os.flush();
            os.close();
            nowFileSize = f.length();
            progressBar.setValue(0);
            if (!this.beiFenJia) {//如果不是备份
                file.delete();
                f.renameTo(file);
            }
            nowFileSize = f.length();
//            if (jiajie == 1) {//如果是单个文件加密则隐藏进度条
//                end();
//            }

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            try {
                is.close();
                os.close();


            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        Date date2 = new Date();
        //计算耗时
        String haoshi = haoShi(date1, date2);
        //日志
        jiarizhi(file, now, haoshi);
        okCount++;//成功次数加一
        return true;
    }

    //文件解密
    public boolean jieMi(File file) {
        String now = getTime();
        if (!canjiemi(file, now)) {
            return false;
        }
        //智能细致
        XiZhi(file);
        //初始化显示
        star();
        Date date1 = new Date();
        byte[] data = null;
        InputStream is = null;
        OutputStream os = null;
        long part = (file.length() - miwen.length) / this.size;
        long surplus = (file.length() - miwen.length) % this.size;
        try {
            is = new FileInputStream(file);
            File f = new File(file.getParent() + "\\解密中" + file.getName());
            os = new FileOutputStream(f);
            data = new byte[this.size];
            byte[] buff = new byte[this.size];
            int n = 1;
            is.read(miwen); //读出密文 丢弃

            //开始进度条线程
            jinduT = new jinDu();
            //给进度条线程初始化
            this.jinduT.setFile(file);
            this.jinduT.setDleFile(f);//最后变成加密的文件
            jinduT.start();
            while (is.read(data) != -1) {


                if (n % 2 == 1) {
                    for (int i = 0; i < this.size; i++) {
                        buff[i] = data[i];
                    }
                    // buff = data;？如何改进
                }
                if (n % 2 == 0) {
                    if (n == part + 1) {//最后一断字节多截了this.size-surplus 所以要先写入
                        os.write(buff, (int) surplus, (int) (this.size - surplus));
                        os.write(data, 0, (int) surplus);
                        os.write(buff, 0, (int) surplus);
                    } else {
                        os.write(data);
                        os.write(buff);
                    }
                    nowFileSize = f.length();//获取当前进度
                }
                if (jianting) {//终止加密解密                
                    end();
                    is.close();
                    os.flush();
                    os.close();
                    //删除f 
                    f.delete();
                    //打印日志********************
                    txt.append("<解密>[失败]（终止解密）[" + now + "]>>文件路径:" + file.getPath() + "\r\n");
                    return false;
                }
                n++;
            }
            if (n % 2 == 0) { //如果最后一次只读进了buff  
                if (n - 1 == part + 1) {//最后一断字节         
                    os.write(buff, 0, (int) surplus);
                } else {
                    os.write(buff);
                }
            }
            is.close();
            os.flush();
            os.close();
            nowFileSize = f.length();


            progressBar.setValue(0);
            file.delete();
            f.renameTo(file);
            nowFileSize = f.length();
            //jindu.setVisible(false);//隐藏进度条
//            if (jiajie == 2) {//如果是单个文件解密这隐藏进度条
//                end();
//            }


        } catch (Exception e) {

            e.printStackTrace();
            return false;
        } finally {
            try {
                is.close();
                os.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        Date date2 = new Date();
        String haoshi = this.haoShi(date1, date2);
        jierizhi(file, now, haoshi);
        okCount++;//成功次数加一
        return true;
    }

    //起始处理
    public void star() {
        if (jiajie % 2 == 0) {//解密中
            load.setText("解密中：");//进度说明
        } else {
            load.setText("加密中：");//进度说明
        }

        jindu.setVisible(true);//进度条
        quxiao.setVisible(true);
        jianting = false;//初始化单个文件终止判断
        jtAll = false;//初始化 所有文件终止判断

    }
    //收尾处理

    public void end() {
        jindu.setVisible(false);//隐藏进度条
        load.setText("");//状态设空
        fileUrl.setText("------------------------------------");//url初始化
        quxiao.setVisible(false);
        endAll.setVisible(false);
        fileCount.setVisible(false);
        fileList = null;
        dirCount = 0;
        //progressBar.setValue(0);
    }
    //使txt光标在最下方

    public void txtEnd() {
        //txt.setCaretPosition(txt.getText().length());
        txt.setSelectionStart(txt.getText().length());
    }

    //遍历整个目录得到所有可加密文件
    public List<File> getFileList(File file, List<File> list) {
        File[] f = file.listFiles();
        for (int i = 0; i < f.length; i++) {
            if (f[i].isDirectory()) {
                list.add(f[i]);//保存目录 为备份做铺垫
                dirCount++;//目录数+1
                getFileList(f[i], list);
            } else {
                int count = 0;
                for (int j = 0; j < sorry.length; j++) {
                    if (f[i].getName().endsWith(sorry[j])) {
                        txt.append("<加密/解密>[未处理]-原因：文件后缀名为[" + sorry[j] + "]无法加密/解密\r\n  >>文件路径:" + f[i].getPath() + "\r\n");
                        break;
                    }
                    count++;
                }
                if (count == sorry.length) {
                    list.add(f[i]);
                }
                count = 0;

            }
        }
        return list;
    }

    public void startProject() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JiaMi().setVisible(true);
            }
        });
    }

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JiaMi().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel endAll;
    private javax.swing.JLabel fileCount;
    private javax.swing.JLabel fileUrl;
    private javax.swing.JTextField j1Name;
    private javax.swing.JTextField j1Size;
    private javax.swing.JTextField j1Url;
    private javax.swing.JTextField j2Name;
    private javax.swing.JLabel j2Name1;
    private javax.swing.JTextField j2Size;
    private javax.swing.JLabel j2Size1;
    private javax.swing.JTextField j2Url;
    private javax.swing.JLabel j2Url1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jindu;
    private javax.swing.JLabel load;
    private javax.swing.JTextField pwd;
    private javax.swing.JLabel quxiao;
    private javax.swing.JLabel tishi;
    private javax.swing.JTextArea txt;
    // End of variables declaration//GEN-END:variables
}
